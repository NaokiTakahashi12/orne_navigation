#!/usr/bin/env python

import rospy
import geometry_msgs.msg
import tf
import math
from std_srvs.srv import Trigger
from fulanghua_srvs.srv import Pose
from time import sleep

class TsukubaChallengeStrategy:
    def __init__(self):
        rospy.init_node('tsukuba_challenge_strategy')
        self.start_nav_server = rospy.Service('start_nav', Trigger, self.start_nav_callback)
        self.resume_nav_server = rospy.Service('resume_nav', Trigger, self.resume_nav_callback)
        self.current_sp = 0
        self.strategy_state= rospy.get_param('state')


        suspend_pose_cfg  =  [rospy.get_param('~suspend_pose1'),rospy.get_param('~suspend_pose2'),rospy.get_param('~suspend_pose3')]
        resume_pose_cfg  =  [rospy.get_param('~resume_pose1'),rospy.get_param('~resume_pose2'),rospy.get_param('~resume_pose3')]
        

        self.world_frame = rospy.get_param('~world_frame', 'map')
        self.robot_frame = rospy.get_param('~robot_frame', 'base_link')

      
        self.suspend_pose = [geometry_msgs.msg.Pose(),geometry_msgs.msg.Pose(),geometry_msgs.msg.Pose()]
        self.resume_pose = [geometry_msgs.msg.Pose(),geometry_msgs.msg.Pose(),geometry_msgs.msg.Pose()]

        for index in range(len(suspend_pose_cfg)):
            self.suspend_pose[index].position.x = suspend_pose_cfg[index]['position']['x']
            self.suspend_pose[index].position.y = suspend_pose_cfg[index]['position']['y']
            self.suspend_pose[index].position.z = suspend_pose_cfg[index]['position']['z']
            self.suspend_pose[index].orientation.x = suspend_pose_cfg[index]['orientation']['x']
            self.suspend_pose[index].orientation.y = suspend_pose_cfg[index]['orientation']['y']
            self.suspend_pose[index].orientation.z = suspend_pose_cfg[index]['orientation']['z']
            self.suspend_pose[index].orientation.w = suspend_pose_cfg[index]['orientation']['w']
        
            self.resume_pose[index].position.x = resume_pose_cfg[index]['position']['x']
            self.resume_pose[index].position.y = resume_pose_cfg[index]['position']['y']
            self.resume_pose[index].position.z = resume_pose_cfg[index]['position']['z']
            self.resume_pose[index].orientation.x = resume_pose_cfg[index]['orientation']['x']
            self.resume_pose[index].orientation.y = resume_pose_cfg[index]['orientation']['y']
            self.resume_pose[index].orientation.z = resume_pose_cfg[index]['orientation']['z']
            self.resume_pose[index].orientation.w = resume_pose_cfg[index]['orientation']['w']

        print "suspend_pose1 = " + str(self.suspend_pose[0])
        print "resume_pose1 = " + str(self.resume_pose[0])

        print "suspend_pose2 = " + str(self.suspend_pose[1])
        print "resume_pose2 = " + str(self.resume_pose[1])

        print "suspend_pose3 = " + str(self.suspend_pose[2])
        print "resume_pose3 = " + str(self.resume_pose[2])
        
        self.tf_listener = tf.TransformListener()

    def start_nav_callback(self, req):
        try:
            rospy.loginfo("strategy: start_nav_callback")
            rospy.wait_for_service('start_wp_nav')
            start_wp_nav = rospy.ServiceProxy('start_wp_nav', Trigger)
            return start_wp_nav()
            #rospy.loginfo(start_wp_nav())
            #return (True, "successful")
        except rospy.ServiceException, e:
            print "error: %s" % e

    def resume_nav_callback(self, req):
        try:
            rospy.loginfo('strategy: resume_nav_callback')
            rospy.wait_for_service('resume_wp_pose')
            resume_wp_nav = rospy.ServiceProxy('resume_wp_pose', Pose)
            return resume_wp_nav(self.resume_pose[self.current_sp-1])
        except rospy.ServiceException, e:
            print "error: %s" % e

    def spin(self):
        rate = rospy.Rate(10)
        SP_NUMBER_MAX = 3

        while  not rospy.is_shutdown():
            rate.sleep()
            if self.strategy_state is True:
                try:
                    (trans, rot) = self.tf_listener.lookupTransform(self.world_frame, self.robot_frame, rospy.Time(0))
                    x = trans[0]
                    y = trans[1]

                    if self.current_sp < SP_NUMBER_MAX:
                        dist = math.sqrt(math.pow(x - self.suspend_pose[self.current_sp].position.x, 2) + math.pow(y - self.suspend_pose[self.current_sp].position.y, 2))
                        print "robot_gl = ("  + str(x) + ", " + str(y) + ")"
                        print "dist = " + str(dist)
                        print "curennt suspend pose =  " + str(self.current_sp + 1)
                    else :
                        print "all suspend pose finished"

                    if(dist < 1.0) and self.current_sp  <  SP_NUMBER_MAX:
                        rospy.loginfo('strategy: send suspending request')
                        rospy.wait_for_service('suspend_wp_pose')
                        suspend_wp_nav = rospy.ServiceProxy('suspend_wp_pose', Pose)
                        print "suspend_wp_nav() = " + str(suspend_wp_nav(self.suspend_pose[self.current_sp]))
                        self.current_sp += 1

                    
                except (tf.LookupException, tf.ConnectivityException, tf.ExtrapolationException):
                    continue
            else :
                print " No suspend Pose "
                

if __name__ == '__main__':
    strategy = TsukubaChallengeStrategy()
    strategy.spin()
